import math

def print_board(board):
    print("\n")
    for i in range(3):
        row = " | ".join(board[i])
        print(row)
        if i < 2:
            print("--+---+--")
    print("\n")

def check_winner(board):
    win_states = [
        [board[0][0], board[0][1], board[0][2]],
        [board[1][0], board[1][1], board[1][2]],
        [board[2][0], board[2][1], board[2][2]],
        [board[0][0], board[1][0], board[2][0]],
        [board[0][1], board[1][1], board[2][1]],
        [board[0][2], board[1][2], board[2][2]],
        [board[0][0], board[1][1], board[2][2]],
        [board[0][2], board[1][1], board[2][0]]
    ]
    if ["X", "X", "X"] in win_states:
        return "X"
    elif ["O", "O", "O"] in win_states:
        return "O"
    elif all(cell != " " for row in board for cell in row):
        return "Draw"
    return None

def minimax(board, depth, is_maximizing, alpha, beta):
    result = check_winner(board)
    if result == "X":
        return -1
    elif result == "O":
        return 1
    elif result == "Draw":
        return 0

    if is_maximizing:
        max_eval = -math.inf
        for i in range(3):
            for j in range(3):
                if board[i][j] == " ":
                    board[i][j] = "O"
                    eval_score = minimax(board, depth+1, False, alpha, beta)
                    board[i][j] = " "
                    max_eval = max(max_eval, eval_score)
                    alpha = max(alpha, eval_score)
                    if beta <= alpha:
                        return max_eval
        return max_eval
    else:
        min_eval = math.inf
        for i in range(3):
            for j in range(3):
                if board[i][j] == " ":
                    board[i][j] = "X"
                    eval_score = minimax(board, depth+1, True, alpha, beta)
                    board[i][j] = " "
                    min_eval = min(min_eval, eval_score)
                    beta = min(beta, eval_score)
                    if beta <= alpha:
                        return min_eval
        return min_eval

def best_move(board):
    best_score = -math.inf
    move = None
    for i in range(3):
        for j in range(3):
            if board[i][j] == " ":
                board[i][j] = "O"
                score = minimax(board, 0, False, -math.inf, math.inf)
                board[i][j] = " "
                if score > best_score:
                    best_score = score
                    move = (i, j)
    return move

def play_game():
    board = [[" " for _ in range(3)] for _ in range(3)]
    print("Welcome to Tic-Tac-Toe!")
    print("You are X, AI is O. Positions are 1-9 as below:\n")
    print("1 | 2 | 3")
    print("--+---+--")
    print("4 | 5 | 6")
    print("--+---+--")
    print("7 | 8 | 9\n")

    human_turn = True
    while True:
        print_board(board)
        winner = check_winner(board)
        if winner:
            if winner == "Draw":
                print("It's a draw!")
            else:
                print(f"{winner} wins!")
            break

        if human_turn:
            while True:
                try:
                    move = int(input("Enter your move (1-9): ")) - 1
                    row, col = divmod(move, 3)
                    if board[row][col] == " ":
                        board[row][col] = "X"
                        break
                    else:
                        print("Cell already taken. Try again.")
                except (ValueError, IndexError):
                    print("Invalid input. Try again.")
        else:
            print("AI is making a move...")
            move = best_move(board)
            if move:
                board[move[0]][move[1]] = "O"
        human_turn = not human_turn

if __name__ == "__main__":
    play_game()
