import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

data = {
    "title": [
        "The Matrix", "The Lord of the Rings", "Inception", "Interstellar",
        "The Dark Knight", "Pulp Fiction", "Fight Club", "Forrest Gump",
        "The Shawshank Redemption", "Gladiator"
    ],
    "genre": [
        "Action Sci-Fi", "Adventure Fantasy", "Action Sci-Fi", "Sci-Fi Drama",
        "Action Crime", "Crime Drama", "Drama Thriller", "Drama Romance",
        "Drama Crime", "Action Drama"
    ],
    "description": [
        "A hacker fights to free humanity from machines.",
        "A hobbit tries to destroy a magic ring.",
        "A thief enters dreams to steal secrets.",
        "A team travels through a wormhole to save Earth.",
        "Batman battles the Joker in Gotham.",
        "Lives of criminals intertwine in chaos.",
        "An office worker starts an underground fight club.",
        "A man with low IQ lives through key events.",
        "Two prisoners form a lasting friendship.",
        "A Roman general seeks revenge for betrayal."
    ]
}

df = pd.DataFrame(data)

df["content"] = df["genre"] + " " + df["description"]

vectorizer = TfidfVectorizer(stop_words="english")
tfidf_matrix = vectorizer.fit_transform(df["content"])

cosine_sim = cosine_similarity(tfidf_matrix, tfidf_matrix)

def recommend_movie(title, top_n=5):
    if title not in df["title"].values:
        print(f"‚ùå Movie '{title}' not found in the database.")
        return

    idx = df[df["title"] == title].index[0]
    similarity_scores = list(enumerate(cosine_sim[idx]))
    similarity_scores = sorted(similarity_scores, key=lambda x: x[1], reverse=True)
    recommended_indices = [i[0] for i in similarity_scores[1:top_n+1]]

    print(f"\nüé¨ Because you liked '{title}', you may also enjoy:")
    for i in recommended_indices:
        print(f"   - {df.iloc[i]['title']} ({df.iloc[i]['genre']})")

if __name__ == "__main__":
    print("=== Simple Movie Recommendation System ===")
    movie_name = input("Enter a movie title: ")
    recommend_movie(movie_name)
